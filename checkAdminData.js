// checkAdminData.js - S·ª¨A L·∫†I NH∆Ø SAU
const mongoose = require('mongoose');

// S·ª≠ d·ª•ng connection string ƒë√∫ng format
const MONGODB_URI = 'mongodb+srv://luanvo10042004_db_user:Maicodon1@webnoithat.yrwqgxf.mongodb.net/webnoithat?retryWrites=true&w=majority';

async function checkAdminData() {
  try {
    console.log('ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...');
    
    // K·∫øt n·ªëi v·ªõi options ƒë·∫ßy ƒë·ªß
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 30000, // TƒÉng timeout l√™n 30 gi√¢y
      socketTimeoutMS: 45000,
      maxPoolSize: 10
    });

    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');

    const Admin = require('./models/admin');
    
    const admins = await Admin.find({});
    console.log('üìä T·ªïng s·ªë admin:', admins.length);
    
    if (admins.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y admin n√†o trong database');
    } else {
      admins.forEach((admin, index) => {
        console.log(`\nüë§ Admin ${index + 1}:`);
        console.log('   Username:', admin.loginInformation.userName);
        console.log('   Password:', admin.loginInformation.password);
        console.log('   Password length:', admin.loginInformation.password.length);
        console.log('   Type:', admin.loginInformation.type);
        console.log('   Roles:', admin.loginInformation.roles);
      });
    }
    
    await mongoose.connection.close();
    console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi');
    
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
    
    // Ki·ªÉm tra l·ªói c·ª• th·ªÉ
    if (error.name === 'MongooseServerSelectionError') {
      console.log('üîç L·ªói k·∫øt n·ªëi ƒë·∫øn server MongoDB');
      console.log('   - Ki·ªÉm tra internet');
      console.log('   - Ki·ªÉm tra credentials');
      console.log('   - Ki·ªÉm tra IP whitelist trong MongoDB Atlas');
    }
    
    process.exit(1);
  }
}

checkAdminData();